---
title: "Daily NBA Predictions Using a Pairwise Competition Model"
author: "James Wolpe"
date: Sys.Date()
categories: [NBA, R]
#page-layout: article 
code-copy: true
code-overflow: wrap
code-line-numbers: true
df-print: paged
output: html_document
image: jt_nba_photo.png
description: "Daily NBA Predictions using 'compr': An R Package for Pairwise Competition Modeling Developed by Dr. Matt Higham and Myself"
---
::: {.panel-tabset}
```{r, include = FALSE}
#devtools::install_github(repo = "https://github.com/jameswolpe/compr")
library(compr)
library(broom)
library(rvest)
library(tidyverse)

# Define the list of URLs
urls <- c(
  "https://www.basketball-reference.com/leagues/NBA_2024_games-october.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-november.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-december.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-january.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-february.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-march.html",
  "https://www.basketball-reference.com/leagues/NBA_2024_games-april.html"
  
)

# Initialize an empty list to store DataFrames
dfs <- list()

# Loop through the URLs and scrape data
for (url in urls) {
  page_html <- read_html(url)
  table_node <- html_nodes(page_html, "table")[[1]]
  df <- html_table(table_node, header = TRUE)
  dfs[[url]] <- df
}

# Combine the DataFrames into one
nba_df <- do.call(rbind, dfs)
rownames(nba_df) <- NULL

nba_df <- nba_df[1:1230, ]
nba_df <- nba_df[, -c(2, 7, 9, 10, 11)]

nba_df <- nba_df |>
  rename(
    date = 1,       
    away = 2,       
    away_pts = 3,   
    home = 4,       
    home_pts = 5,   
    OT = 6          
  )

nba_season <- nba_df |> #there are both OT and 2OT
  mutate(OT = ifelse(OT == "", FALSE, TRUE),
         home_winner = ifelse(home_pts > away_pts, TRUE, FALSE),
         pts_diff = home_pts - away_pts)
# convert date to date format
nba_season$date <- as.Date(nba_season$date, format = "%a, %b %d, %Y")
```


```{r, include = FALSE}
#get today's date
today <- Sys.Date()
tmrw <- Sys.Date() + 1
day_after_tmrw <- Sys.Date() + 2

# split up nba_season 2 df's one before today and one after
nba_season_before <- nba_season |>
  filter(date < today)

#get all of today's games
todays_games <- nba_season |>
  filter(date == today) |>
  select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)

# get all of tmrw games
tmrw_games <- nba_season |>
  filter(date == tmrw) |>
  select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)

# get all of day after tmrw games
day_after_tmrw_games <- nba_season |>
  filter(date == day_after_tmrw) |>
  select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)


#FIXME it needs a ref_player?
current_nba_pred <- comp_glm(formula = home_winner ~ 1,
         data = nba_season_before,
         p1 = "home", 
         p2 = "away",
         p1_effects = ~ 1,
         p2_effects = ~ 1,
         ref_player = "New York Knicks",
         family = "binomial")
# FIXME compr needs to load augment from broom
todays_pred <- aug_mod(todays_games, current_nba_pred)
tmrw_pred <- aug_mod(tmrw_games, current_nba_pred)
day_after_tmrw_pred <- aug_mod(day_after_tmrw_games, current_nba_pred)

output_table <- function(aug_output){
  aug_output |> 
  mutate( 
    h_win_perc = exp(.fitted)/ (1+exp(.fitted)),
    a_win_perc = 1 - h_win_perc,
    h_u_bound = exp(.fitted + .se.fit)/ (1+ exp(.fitted + .se.fit)),
    h_l_bound = exp(.fitted - .se.fit)/ (1+ exp(.fitted - .se.fit)),
  ) |>
  pivot_longer(cols = c(a_win_perc, h_win_perc), names_to = "win_type", values_to = "Win Prob.") |>
  mutate(loc = if_else(str_detect(win_type, "a_win_perc"), "Away", "Home"),
        Team = if_else(str_detect(win_type, "a_win_perc"), away, home)) |>
  select(loc, Team, `Win Prob.`, h_u_bound, h_l_bound)
  
}

output_table_1 <- output_table(todays_pred)
output_table_2 <- output_table(tmrw_pred)
output_table_3 <- output_table(day_after_tmrw_pred)

```


```{r, include = FALSE}
individual_games_list_1 <- list()
individual_games_list_2 <- list()
individual_games_list_3 <- list()

# Loop through the rows and create pairs

create_pairs <- function(output_table, individual_games_list) {
  if (nrow(output_table) == 0) {
    return()
  }
  for (i in seq(1, nrow(output_table), by = 2)) {
    pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
    individual_games_list[[floor((i / 2) + 1)]] <- pair_df
  }
  return(individual_games_list)
}


individual_games_list_1 <- create_pairs(output_table_1, individual_games_list_1)
individual_games_list_2 <- create_pairs(output_table_2, individual_games_list_2)
individual_games_list_3 <- create_pairs(output_table_3, individual_games_list_3)
```


```{r fig.height = 1.5, fig.width = 8, echo = FALSE}
# for loop didnt work for some reason
#for (game in individual_games_list) {
#  print(knitr::kable(game))
#}

# This has 
loli_plot <- function(individual_games_list, i) {
  ggplot(individual_games_list[[i]], aes(x = Team[2], y = `Win Prob.`[2])) +
  geom_point(size = 2) +
  geom_errorbar(aes(ymin = h_l_bound, ymax = h_u_bound)) +
  labs(x = NULL,
       y = 'Win Prob.',
       title = paste0(individual_games_list[[i]]$Team[2], " Win Probability")) +
  scale_y_continuous(
    labels = scales::percent_format(scale = 100),
    limits = c(0, 1)
  ) +
  coord_flip() +
  theme_bw() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )
}

table_output <- function(individual_games_list, i) {
    individual_games_list[[i]] |>
    select(Team, `Win Prob.`) |>
    mutate(`Win Prob.` = scales::percent(`Win Prob.`)) |>
    knitr::kable(format = "html", digits = 1)
}
```


## Today's Games (`r format(Sys.Date(), "%B %e, %Y")`)
```{r fig.height = 1.5, fig.width = 8, echo = FALSE}
if (0 == length(individual_games_list_1)){
  cat("No scheduled games")
}
if (1 <= length(individual_games_list_1)){
    table_output(individual_games_list_1, 1)
}
if (1 <= length(individual_games_list_1)){
    loli_plot(individual_games_list_1, 1)
}
if (2 <= length(individual_games_list_1)){
    table_output(individual_games_list_1, 2)
}
if (2 <= length(individual_games_list_1)){
    loli_plot(individual_games_list_1, 2)
}

if (3 <= length(individual_games_list_1)){
    table_output(individual_games_list_1, 3)
}
if (3 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 3)
}

if (4 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 4)
}
if (4 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 4)
}

if (5 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 5)
}
if (5 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 5)
}

if (6 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 6)
}
if (6 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 6)
}

if (7 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 7)
}
if (7 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 7)
}

if (8 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 8)
}
if (8 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 8)
}

if (9 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 9)
}
if (9 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 9)
}

if (10 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 10)
}
if (10 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 10)
}

if (11 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 11)
}
if (11 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 11)
}

if (12 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 12)
}
if (12 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 12)
}

if (13 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 13)
}
if (13 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 13)
}

if (14 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 14)
}
if (14 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 14)
}

if (15 <= length(individual_games_list_1)){
  table_output(individual_games_list_1, 15)
}
if (15 <= length(individual_games_list_1)){
  loli_plot(individual_games_list_1, 15)
}
```



## Games `r format(Sys.Date() + 1, "%B %e, %Y")`

```{r fig.height = 1.5, fig.width = 8, echo = FALSE}
if (0 == length(individual_games_list_2)){
  cat("No scheduled games")
}
if (1 <= length(individual_games_list_2)){
    table_output(individual_games_list_2, 1)
}
if (1 <= length(individual_games_list_2)){
    loli_plot(individual_games_list_2, 1)
}
if (2 <= length(individual_games_list_2)){
    table_output(individual_games_list_2, 2)
}
if (2 <= length(individual_games_list_2)){
    loli_plot(individual_games_list_2, 2)
}

if (3 <= length(individual_games_list_2)){
    table_output(individual_games_list_2, 3)
}
if (3 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 3)
}

if (4 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 4)
}
if (4 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 4)
}

if (5 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 5)
}
if (5 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 5)
}

if (6 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 6)
}
if (6 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 6)
}

if (7 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 7)
}
if (7 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 7)
}

if (8 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 8)
}
if (8 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 8)
}

if (9 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 9)
}
if (9 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 9)
}

if (10 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 10)
}
if (10 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 10)
}

if (11 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 11)
}
if (11 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 11)
}

if (12 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 12)
}
if (12 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 12)
}

if (13 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 13)
}
if (13 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 13)
}

if (14 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 14)
}
if (14 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 14)
}

if (15 <= length(individual_games_list_2)){
  table_output(individual_games_list_2, 15)
}
if (15 <= length(individual_games_list_2)){
  loli_plot(individual_games_list_2, 15)
}
```

## Games `r format(Sys.Date() + 2, "%B %e, %Y")`

```{r fig.height = 1.5, fig.width = 8, echo = FALSE}
if (0 == length(individual_games_list_3)){
  cat("No scheduled games")
}
if (1 <= length(individual_games_list_3)){
    table_output(individual_games_list_3, 1)
}
if (1 <= length(individual_games_list_3)){
    loli_plot(individual_games_list_3, 1)
}

if (2 <= length(individual_games_list_3)){
    table_output(individual_games_list_3, 2)
}
if (2 <= length(individual_games_list_3)){
    loli_plot(individual_games_list_3, 2)
}

if (3 <= length(individual_games_list_3)){
    table_output(individual_games_list_3, 3)
}
if (3 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 3)
}

if (4 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 4)
}
if (4 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 4)
}

if (5 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 5)
}
if (5 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 5)
}

if (6 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 6)
}
if (6 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 6)
}

if (7 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 7)
}
if (7 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 7)
}

if (8 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 8)
}
if (8 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 8)
}

if (9 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 9)
}
if (9 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 9)
}

if (10 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 10)
}
if (10 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 10)
}

if (11 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 11)
}
if (11 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 11)
}

if (12 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 12)
}
if (12 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 12)
}

if (13 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 13)
}
if (13 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 13)
}

if (14 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 14)
}
if (14 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 14)
}

if (15 <= length(individual_games_list_3)){
  table_output(individual_games_list_3, 15)
}
if (15 <= length(individual_games_list_3)){
  loli_plot(individual_games_list_3, 15)
}
```
:::

---


Data retrieved from [Basketball Reference](https://www.basketball-reference.com/leagues/NBA_2024_games.html).
Code used to fit the model:

```{r, eval=FALSE}
devtools::install_github(repo = "https://github.com/jameswolpe/compr")
library(compr)
current_nba_pred <- comp_glm(formula = home_winner ~ 1,
         data = nba_results_df,
         p1 = "home", 
         p2 = "away",
         p1_effects = ~ 1,
         p2_effects = ~ 1,
         ref_player = "New York Knicks",
         family = "binomial")
```

