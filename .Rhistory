filter(date == day_after_tmrw) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
#FIXME it needs a ref_player?
current_nba_pred <- comp_glm(formula = home_winner ~ 1,
data = nba_season_before,
p1 = "home",
p2 = "away",
p1_effects = ~ 1,
p2_effects = ~ 1,
ref_player = "New York Knicks",
family = "binomial")
# FIXME compr needs to load augment from broom
todays_pred <- aug_mod(todays_games, current_nba_pred)
tmrw_pred <- aug_mod(tmrw_games, current_nba_pred)
day_after_tmrw_pred <- aug_mod(day_after_tmrw_games, current_nba_pred)
output_table <- function(aug_output){
aug_output |>
mutate(
h_win_perc = exp(.fitted)/ (1+exp(.fitted)),
a_win_perc = 1 - h_win_perc,
h_u_bound = exp(.fitted + .se.fit)/ (1+ exp(.fitted + .se.fit)),
h_l_bound = exp(.fitted - .se.fit)/ (1+ exp(.fitted - .se.fit)),
) |>
pivot_longer(cols = c(a_win_perc, h_win_perc), names_to = "win_type", values_to = "Win Prob.") |>
mutate(loc = if_else(str_detect(win_type, "a_win_perc"), "Away", "Home"),
Team = if_else(str_detect(win_type, "a_win_perc"), away, home)) |>
select(loc, Team, `Win Prob.`, h_u_bound, h_l_bound)
}
output_table_1 <- output_table(todays_pred)
output_table_2 <- output_table(tmrw_pred)
output_table_3 <- output_table(day_after_tmrw_pred)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) >= 2) {  # Check if there are at least two rows in the output_table
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
return(individual_games_list)
}
} else {
return(individual_games_list)
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
individual_games_list_1 <- list()
individual_games_list_2 <- list()
individual_games_list_3 <- list()
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) >= 2) {  # Check if there are at least two rows in the output_table
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
return(individual_games_list)
}
} else {
return(individual_games_list)
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
return(individual_games_list)
}
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
break
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) > 0) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
browser()
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
browser()
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list)
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
browser()
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list)
}
create_pairs(output_table_1, individual_games_list_1)
n
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list)
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
individual_games_list
}
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
return()  # Exit the function if output_table is empty
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
individual_games_list
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
if (nrow(output_table_1) != 0) {
create_pairs(output_table_1, individual_games_list_1)
}
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
reate_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_3, individual_games_list_3)
create_pairs(output_table_3, individual_games_list_3)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_3, individual_games_list_3)
individual_games_list_3 <- create_pairs(output_table_3, individual_games_list_3)
browser()
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
browser()
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
# Chunk 1
#devtools::install_github(repo = "https://github.com/jameswolpe/compr")
library(compr)
library(broom)
library(rvest)
library(tidyverse)
# Define the list of URLs
urls <- c(
"https://www.basketball-reference.com/leagues/NBA_2024_games-october.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-november.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-december.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-january.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-february.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-march.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-april.html"
)
# Initialize an empty list to store DataFrames
dfs <- list()
# Loop through the URLs and scrape data
for (url in urls) {
page_html <- read_html(url)
table_node <- html_nodes(page_html, "table")[[1]]
df <- html_table(table_node, header = TRUE)
dfs[[url]] <- df
}
# Combine the DataFrames into one
nba_df <- do.call(rbind, dfs)
rownames(nba_df) <- NULL
nba_df <- nba_df[1:1230, ]
nba_df <- nba_df[, -c(2, 7, 9, 10, 11)]
nba_df <- nba_df |>
rename(
date = 1,
away = 2,
away_pts = 3,
home = 4,
home_pts = 5,
OT = 6
)
nba_season <- nba_df |> #there are both OT and 2OT
mutate(OT = ifelse(OT == "", FALSE, TRUE),
home_winner = ifelse(home_pts > away_pts, TRUE, FALSE),
pts_diff = home_pts - away_pts)
# convert date to date format
nba_season$date <- as.Date(nba_season$date, format = "%a, %b %d, %Y")
# Chunk 2
#get todays date
today <- Sys.Date()
tmrw <- Sys.Date() + 1
day_after_tmrw <- Sys.Date() + 2
# split up nba_season 2 df's one before today and one after
nba_season_before <- nba_season |>
filter(date < today)
#get all of todays games
todays_games <- nba_season |>
filter(date == today) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
# get all of tmrw games
tmrw_games <- nba_season |>
filter(date == tmrw) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
# get all of day after tmrw games
day_after_tmrw_games <- nba_season |>
filter(date == day_after_tmrw) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
#FIXME it needs a ref_player?
current_nba_pred <- comp_glm(formula = home_winner ~ 1,
data = nba_season_before,
p1 = "home",
p2 = "away",
p1_effects = ~ 1,
p2_effects = ~ 1,
ref_player = "New York Knicks",
family = "binomial")
# FIXME compr needs to load augment from broom
todays_pred <- aug_mod(todays_games, current_nba_pred)
tmrw_pred <- aug_mod(tmrw_games, current_nba_pred)
day_after_tmrw_pred <- aug_mod(day_after_tmrw_games, current_nba_pred)
output_table <- function(aug_output){
aug_output |>
mutate(
h_win_perc = exp(.fitted)/ (1+exp(.fitted)),
a_win_perc = 1 - h_win_perc,
h_u_bound = exp(.fitted + .se.fit)/ (1+ exp(.fitted + .se.fit)),
h_l_bound = exp(.fitted - .se.fit)/ (1+ exp(.fitted - .se.fit)),
) |>
pivot_longer(cols = c(a_win_perc, h_win_perc), names_to = "win_type", values_to = "Win Prob.") |>
mutate(loc = if_else(str_detect(win_type, "a_win_perc"), "Away", "Home"),
Team = if_else(str_detect(win_type, "a_win_perc"), away, home)) |>
select(loc, Team, `Win Prob.`, h_u_bound, h_l_bound)
}
output_table_1 <- output_table(todays_pred)
output_table_2 <- output_table(tmrw_pred)
output_table_3 <- output_table(day_after_tmrw_pred)
individual_games_list_1 <- list()
individual_games_list_2 <- list()
individual_games_list_3 <- list()
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
# Chunk 1
#devtools::install_github(repo = "https://github.com/jameswolpe/compr")
library(compr)
library(broom)
library(rvest)
library(tidyverse)
# Define the list of URLs
urls <- c(
"https://www.basketball-reference.com/leagues/NBA_2024_games-october.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-november.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-december.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-january.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-february.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-march.html",
"https://www.basketball-reference.com/leagues/NBA_2024_games-april.html"
)
# Initialize an empty list to store DataFrames
dfs <- list()
# Loop through the URLs and scrape data
for (url in urls) {
page_html <- read_html(url)
table_node <- html_nodes(page_html, "table")[[1]]
df <- html_table(table_node, header = TRUE)
dfs[[url]] <- df
}
# Combine the DataFrames into one
nba_df <- do.call(rbind, dfs)
rownames(nba_df) <- NULL
nba_df <- nba_df[1:1230, ]
nba_df <- nba_df[, -c(2, 7, 9, 10, 11)]
nba_df <- nba_df |>
rename(
date = 1,
away = 2,
away_pts = 3,
home = 4,
home_pts = 5,
OT = 6
)
nba_season <- nba_df |> #there are both OT and 2OT
mutate(OT = ifelse(OT == "", FALSE, TRUE),
home_winner = ifelse(home_pts > away_pts, TRUE, FALSE),
pts_diff = home_pts - away_pts)
# convert date to date format
nba_season$date <- as.Date(nba_season$date, format = "%a, %b %d, %Y")
# Chunk 2
#get todays date
today <- Sys.Date()
tmrw <- Sys.Date() + 1
day_after_tmrw <- Sys.Date() + 2
# split up nba_season 2 df's one before today and one after
nba_season_before <- nba_season |>
filter(date < today)
#get all of todays games
todays_games <- nba_season |>
filter(date == today) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
# get all of tmrw games
tmrw_games <- nba_season |>
filter(date == tmrw) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
# get all of day after tmrw games
day_after_tmrw_games <- nba_season |>
filter(date == day_after_tmrw) |>
select(-date, -away_pts, -home_pts, -OT, -home_winner, -pts_diff)
#FIXME it needs a ref_player?
current_nba_pred <- comp_glm(formula = home_winner ~ 1,
data = nba_season_before,
p1 = "home",
p2 = "away",
p1_effects = ~ 1,
p2_effects = ~ 1,
ref_player = "New York Knicks",
family = "binomial")
# FIXME compr needs to load augment from broom
todays_pred <- aug_mod(todays_games, current_nba_pred)
tmrw_pred <- aug_mod(tmrw_games, current_nba_pred)
day_after_tmrw_pred <- aug_mod(day_after_tmrw_games, current_nba_pred)
output_table <- function(aug_output){
aug_output |>
mutate(
h_win_perc = exp(.fitted)/ (1+exp(.fitted)),
a_win_perc = 1 - h_win_perc,
h_u_bound = exp(.fitted + .se.fit)/ (1+ exp(.fitted + .se.fit)),
h_l_bound = exp(.fitted - .se.fit)/ (1+ exp(.fitted - .se.fit)),
) |>
pivot_longer(cols = c(a_win_perc, h_win_perc), names_to = "win_type", values_to = "Win Prob.") |>
mutate(loc = if_else(str_detect(win_type, "a_win_perc"), "Away", "Home"),
Team = if_else(str_detect(win_type, "a_win_perc"), away, home)) |>
select(loc, Team, `Win Prob.`, h_u_bound, h_l_bound)
}
output_table_1 <- output_table(todays_pred)
output_table_2 <- output_table(tmrw_pred)
output_table_3 <- output_table(day_after_tmrw_pred)
individual_games_list_1 <- list()
individual_games_list_2 <- list()
individual_games_list_3 <- list()
# Loop through the rows and create pairs
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
}
create_pairs(output_table_1, individual_games_list_1)
create_pairs(output_table_2, individual_games_list_2)
create_pairs(output_table_3, individual_games_list_3)
if (0 == length(individual_games_list_1)){
print("No scheduled games")
}
for (i in seq(1, nrow(output_table_1), by = 2)) {
pair_df <- output_table_1[i:min(i + 1, nrow(output_table_1)), ]
individual_games_list_1[[floor((i / 2) + 1)]] <- pair_df
}
individual_games_list_1 <- create_pairs(output_table_1, individual_games_list_1)
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list))
create_pairs <- function(output_table, individual_games_list) {
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list)
}
individual_games_list_1 <- create_pairs(output_table_1, individual_games_list_1)
create_pairs <- function(output_table, individual_games_list) {
if (nrow(output_table) == 0) {
return()
}
for (i in seq(1, nrow(output_table), by = 2)) {
pair_df <- output_table[i:min(i + 1, nrow(output_table)), ]
individual_games_list[[floor((i / 2) + 1)]] <- pair_df
}
return(individual_games_list)
}
individual_games_list_1 <- create_pairs(output_table_1, individual_games_list_1)
individual_games_list_1 <- create_pairs(output_table_1, individual_games_list_1)
individual_games_list_2 <- create_pairs(output_table_2, individual_games_list_2)
individual_games_list_3 <- create_pairs(output_table_3, individual_games_list_3)
summary(current_nba_pred)
current_nba_pred_1 <- comp_glm(formula = home_winner ~ 1,
data = nba_season_before,
p1 = "home",
p2 = "away",
p1_effects = ~ home,
p2_effects = ~ away,
ref_player = "New York Knicks",
family = "binomial")
summary(current_nba_pred_1)
summary(current_nba_pred)
